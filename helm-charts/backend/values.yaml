# Backend Application Configuration

# Global settings
global:
  environment: dev
  domain: example.com

# PostgreSQL Database (StatefulSet)
postgresql:
  enabled: true
  image:
    repository: postgres
    tag: "15.4"
    pullPolicy: IfNotPresent
  
  auth:
    postgresPassword: "postgres123"
    database: "appdb"
    username: "appuser"
    password: "apppass123"
  
  primary:
    persistence:
      enabled: true
      storageClass: "fast-ssd"
      size: 10Gi
      accessModes:
        - ReadWriteOnce
    
    resources:
      limits:
        cpu: "1000m"
        memory: "1Gi"
      requests:
        cpu: "500m"
        memory: "512Mi"
    
    service:
      type: ClusterIP
      port: 5432
    
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9187"
    
    podSecurityContext:
      fsGroup: 999
      runAsUser: 999
      runAsGroup: 999

# Redis Cache (StatefulSet)
redis:
  enabled: true
  image:
    repository: redis
    tag: "7.2-alpine"
    pullPolicy: IfNotPresent
  
  auth:
    enabled: true
    password: "redis123"
  
  master:
    persistence:
      enabled: true
      storageClass: "standard-ssd"
      size: 5Gi
      accessModes:
        - ReadWriteOnce
    
    resources:
      limits:
        cpu: "500m"
        memory: "512Mi"
      requests:
        cpu: "250m"
        memory: "256Mi"
    
    service:
      type: ClusterIP
      port: 6379
    
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9121"

# Application Server
app:
  enabled: true
  image:
    repository: nginx
    tag: "alpine"
    pullPolicy: IfNotPresent
  
  replicas: 3
  
  resources:
    limits:
      cpu: "500m"
      memory: "512Mi"
    requests:
      cpu: "250m"
      memory: "256Mi"
  
  service:
    type: ClusterIP
    port: 80
    targetPort: 80
  
  ingress:
    enabled: true
    className: nginx
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
    hosts:
      - host: api.example.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: backend-tls
        hosts:
          - api.example.com
  
  env:
    - name: DATABASE_URL
      value: "postgresql://appuser:apppass123@postgresql:5432/appdb"
    - name: REDIS_URL
      value: "redis://:redis123@redis-master:6379/0"
    - name: NODE_ENV
      value: "production"
  
  configMap:
    enabled: true
    data:
      app.conf: |
        server {
          listen 80;
          server_name api.example.com;
          
          location / {
            proxy_pass http://localhost:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
          }
          
          location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
          }
        }
  
  secret:
    enabled: true
    data:
      jwt-secret: "your-super-secret-jwt-key-change-this-in-production"
      api-key: "your-api-key-here"

# Horizontal Pod Autoscaler
hpa:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Pod Disruption Budget
pdb:
  enabled: true
  minAvailable: 1

# Network Policies
networkPolicy:
  enabled: true
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: frontend
      ports:
        - protocol: TCP
          port: 80
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 80
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              name: postgresql
      ports:
        - protocol: TCP
          port: 5432
    - to:
        - namespaceSelector:
            matchLabels:
              name: redis
      ports:
        - protocol: TCP
          port: 6379
    - ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 80

# Service Account
serviceAccount:
  enabled: true
  create: true
  annotations: {}

# RBAC
rbac:
  enabled: true
  create: true

# Pod Security Context
securityContext:
  runAsNonRoot: false
  runAsUser: 0
  runAsGroup: 0
  fsGroup: 0

# Node Selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - backend
          topologyKey: kubernetes.io/hostname 