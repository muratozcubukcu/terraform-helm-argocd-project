argocd:
  argo-workflows:
    enabled: false

  server:
    replicas: 1
    extraArgs:
      - --insecure
      - --auth-mode=server
      - --auth-mode=client
    service:
      type: ClusterIP  # Explicitly set service type to avoid issues
      port: 443
      targetPort: https
    ingress:
      enabled: true
      ingressClassName: nginx
      hosts:
        - argocd.local
        - argocd.example.com  # Fallback host for different environments
      paths:
        - path: /
          pathType: Prefix
          port: 443
      tls:
        - secretName: argocd-server-tls
          hosts:
            - argocd.local
            - argocd.example.com
      annotations:
        nginx.ingress.kubernetes.io/ssl-passthrough: "true"
        nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"

    resources:
      requests:
        memory: "256Mi"
        cpu: "250m"
      limits:
        memory: "512Mi"
        cpu: "500m"

  repoServer:
    replicas: 1
    resources:
      requests:
        memory: "256Mi"
        cpu: "250m"
      limits:
        memory: "512Mi"
        cpu: "500m"

  applicationController:
    replicas: 1
    resources:
      requests:
        memory: "256Mi"
        cpu: "250m"
      limits:
        memory: "512Mi"
        cpu: "500m"
  
  applicationSet:
    enabled: true
    resources:
      requests:
        memory: "256Mi"
        cpu: "250m"
      limits:
        memory: "512Mi"
        cpu: "500m"

  redis:
    enabled: true
    auth:
      enabled: false
    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "256Mi"
        cpu: "200m"

  postgresql:
    enabled: false

postgresql:
  enabled: true
  auth:
    postgresPassword: "argocd123"
    database: "argocd"
    username: "argocd"
    password: "argocd123"
  
  primary:
    persistence:
      enabled: true
      size: "10Gi"
      storageClass: "hostpath"
    
    resources:
      requests:
        memory: "256Mi"
        cpu: "250m"
      limits:
        memory: "512Mi"
        cpu: "500m"
    
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "5432"

    service:
      type: ClusterIP
      port: 5432
    
    securityContext:
      enabled: true
      fsGroup: 1001
      runAsUser: 1001
      runAsNonRoot: true

  architecture: "standalone"

global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: "standard"

rbac:
  create: true
  pspEnabled: false

serviceAccount:
  create: true
  name: "argocd-application-controller"
  annotations: {}

securityContext:
  runAsNonRoot: true
  runAsUser: 999
  fsGroup: 999 

cacheClear:
  enabled: false  # Disabled by default to prevent issues
  cacheType: "all"  # Options: redis, argo, system, all
  dryRun: false

cronWorkflows:
  enabled: false
  workflows:
    clear-redis-cache:
      schedule: "0 0 * * *"
      templates:
        - name: clear-redis
          container:
            image: redis:7-alpine
            command: ["redis-cli"]
            args: ["-h", "redis", "-p", "6379", "FLUSHALL"]